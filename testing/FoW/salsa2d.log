debug at C:\MarineScotlandPower\MRSea\MRSea/R/runSALSA2D.R#181: baseModel1D <- model
debug at C:\MarineScotlandPower\MRSea\MRSea/R/runSALSA2D.R#182: baseModel <- baseModel1D
debug at C:\MarineScotlandPower\MRSea\MRSea/R/runSALSA2D.R#184: output <- return.reg.spline.fit.2d(splineParams, startKnots = salsa2dlist$startKnots, 
    winHalfWidth, fitnessMeasure = salsa2dlist$fitnessMeasure, 
    maxIterations = 10, tol = tol, baseModel = baseModel, radiusIndices = NULL, 
    initialise = TRUE, initialKnots = NULL, interactionTerm = interactionTerm, 
    knot.seed = 10, suppress.printout)
[1] "initialDispersion 17.150190876809"
[1] "******************************************************************************"
[1] "Initialising..."
[1] "******************************************************************************"
[1] "Space-filling knots...."
[1] "Initialising model..."
[1] "Initial model fitted..."
[1] "Fitting Initial Radii"
[1] "initialising complete"
[1] "******************************************************************************"
[1] "Exchanging..."
[1] "******************************************************************************"
[1] "******************************************************************************"
[1] "Moving knot..."
[1] "******************************************************************************"
[1] "Adding knot..."
[1] "******************************************************************************"
[1] "Improving..."
[1] "******************************************************************************"
[1] "And we're done..."
debug at C:\MarineScotlandPower\MRSea\MRSea/R/runSALSA2D.R#186: baseModel <- output$out.lm
debug at C:\MarineScotlandPower\MRSea\MRSea/R/runSALSA2D.R#190: if (length(output$models) > 0) {
    modRes <- c()
    for (m in 1:length(output$models)) {
        modelNo <- m
        knotPosition <- output$models[[m]][[1]]
        rIs <- output$models[[m]][[2]]
        r <- output$models[[m]][[3]]
        fitScore <- output$models[[m]][[4]]
        modRes <- rbind(modRes, data.frame(modelNo, knotPosition, 
            rIs, fitScore))
    }
    modRes <- modRes[order(modRes$fitScore), ]
    bestModNo <- unique(modRes$modelNo[which(modRes$fitScore == 
        min(modRes$fitScore))])[1]
    a <- sum(as.vector(output$invInd[output$aR]) - as.vector(unlist(output$models[[bestModNo]][1])))
    print(paste("a = ", a, sep = ""))
    if (a != 0) 
        break
}
debug at C:\MarineScotlandPower\MRSea\MRSea/R/runSALSA2D.R#214: if (chooserad == F) {
    radii = salsa2dlist$r_seq
    x <- as.vector(splineParams[[1]]$grid[, 1])
    y <- as.vector(splineParams[[1]]$grid[, 2])
    xvals <- max(x)
    yvals <- max(y)
    if (length(salsa2dlist$r_seq) > 1) {
        radiusIndices <- rep(round(length(salsa2dlist$r_seq)/2), 
            (length(output$aR)))
    }
    else {
        radiusIndices <- rep(1, length(output$aR))
    }
    initDisp <- getDispersion(baseModel)
    output_radii <- initialise.measures_2d(k2k, maxIterations = 10, 
        salsa2dlist$gap, radii, d2k, gridResp, explData, splineParams[[1]]$startKnots, 
        xvals, yvals, explanatory, splineParams[[1]]$response, 
        baseModel, radiusIndices = radiusIndices, initialise = F, 
        initialKnots = salsa2dlist$knotgrid[output$aR, ], fitnessMeasure = salsa2dlist$fitnessMeasure, 
        interactionTerm = interactionTerm, data = data, knot.seed = 10, 
        initDisp)
    splineParams[[1]]$radii = radii
    splineParams[[1]][["knotPos"]] = output_radii$aR
    TwoDModelsfirstStage <- output_radii$models
    splineParams[[1]][["radiusIndices"]] = output_radii$radiusIndices
    splineParams[[1]][["invInd"]] = output_radii$invInd
    modelFit = output_radii$BIC
    aRout <- list(aR1 = output$aR, aR2 = output_radii$aR)
    baseModel <- output_radii$out.lm
} else {
    splineParams[[1]]$radii = radii
    splineParams[[1]][["knotPos"]] = output$aR
    TwoDModelsfirstStage <- output$models
    splineParams[[1]][["radiusIndices"]] = output$radiusIndices
    splineParams[[1]][["invInd"]] = output$invInd
    modelFit = output$BIC
    aRout = output$aR
}
